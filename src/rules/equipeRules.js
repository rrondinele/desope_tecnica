// ==============================
// ðŸ“Œ Regras para EquipeSection
// ==============================

// âœ… Gera um ID Ãºnico para a equipe
export function gerarIdUnico() {
  return Date.now();
}

// âœ… Valida se a equipe tem os campos obrigatÃ³rios
export function validarEquipe(equipe) {
  return Boolean(equipe.codigo_equipe && equipe.encarregado);
}

// âœ… Valida se o eletricista pode ser adicionado
export function validarEletricista(eletricista, eletricistasAtuais) {
  if (!eletricista) {
    alert("Selecione um eletricista antes de adicionar.");
    return false;
  }

  if (eletricistasAtuais.includes(eletricista)) {
    alert("Este eletricista jÃ¡ foi adicionado Ã  equipe.");
    return false;
  }

  return true;
}

// âœ… Adiciona uma equipe nova Ã  lista existente
export function adicionarEquipe(novaEquipe, equipesAtuais) {
  // ValidaÃ§Ã£o: Verifica se os campos obrigatÃ³rios de novaEquipe estÃ£o preenchidos
  if (
    !novaEquipe.codigo_equipe ||
    novaEquipe.eletricistas.length === 0 // Verifica se o array eletricistas estÃ¡ vazio
  ) {
    alert("Preencha todos os campos obrigatÃ³rios antes de adicionar a equipe.");
    return equipesAtuais;
  }

  // Adiciona a equipe
  return [
    ...(equipesAtuais || []),
    { ...novaEquipe, id: gerarIdUnico() }
  ];
}

// âœ… Remove uma equipe pelo ID
export function removerEquipe(id, equipesAtuais) {
  return equipesAtuais.filter((eq) => eq.id !== id);
}

// âœ… Atualiza um campo da equipe em ediÃ§Ã£o
export function atualizarCampoEquipe(novaEquipe, campo, valor) {
  return { ...novaEquipe, [campo]: valor };
}

// âœ… Regras de exibiÃ§Ã£o: retorna mensagem se a lista estiver vazia
export function obterMensagemEquipesVazia(equipes) {
  return (equipes?.length || 0) === 0
    ? "Nenhuma equipe adicionada."
    : null;
}
